// ========================================
// VERIFICA√á√ÉO COMPLETA DO SISTEMA
// ========================================
// Este script verifica todo o sistema e identifica problemas

const { db, USE_POSTGRES } = require('./db');

console.log('üîç VERIFICA√á√ÉO COMPLETA DO SISTEMA FUTSAL MANAGER\n');
console.log('‚ïê'.repeat(60));
console.log('Ambiente:', USE_POSTGRES ? 'üåê PostgreSQL (Render)' : 'üíª SQLite (Localhost)');
console.log('Data:', new Date().toLocaleString('pt-PT'));
console.log('‚ïê'.repeat(60));

const problemas = [];
const avisos = [];
const sucessos = [];

// Fun√ß√µes auxiliares
function addProblema(msg) {
  problemas.push(msg);
  console.log(`\n‚ùå PROBLEMA: ${msg}`);
}

function addAviso(msg) {
  avisos.push(msg);
  console.log(`\n‚ö†Ô∏è  AVISO: ${msg}`);
}

function addSucesso(msg) {
  sucessos.push(msg);
  console.log(`\n‚úÖ ${msg}`);
}

// Query helper
function query(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.query(sql, params, (err, result) => {
      if (err) reject(err);
      else resolve(result);
    });
  });
}

async function verificarSistema() {
  console.log('\n\nüìä 1. VERIFICANDO JOGADORES...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    // 1. Jogadores
    const jogadores = await query('SELECT COUNT(*) as total FROM jogadores WHERE COALESCE(suspenso, 0) = 0');
    const totalJogadores = jogadores[0].total;
    
    console.log(`Total de jogadores: ${totalJogadores}`);
    
    if (totalJogadores === 20) {
      addSucesso(`20 jogadores cadastrados (correto)`);
    } else if (totalJogadores === 18) {
      addProblema(`Apenas ${totalJogadores} jogadores (faltam 2: Filipe Garc√™s e Leonardo Sousa)`);
      console.log(`   ‚Üí Solu√ß√£o: Executar ADICIONAR_JOGADORES.bat`);
    } else {
      addAviso(`Total de jogadores: ${totalJogadores} (esperado: 20)`);
    }

    // Listar jogadores
    const listaJogadores = await query('SELECT nome FROM jogadores WHERE COALESCE(suspenso, 0) = 0 ORDER BY nome');
    console.log('\nJogadores cadastrados:');
    listaJogadores.forEach((j, i) => {
      console.log(`  ${(i + 1).toString().padStart(2, '0')}. ${j.nome}`);
    });

    // Verificar faltantes
    const jogadoresEsperados = [
      'Carlos Correia', 'Carlos Silva', 'C√©saro Cruz', 'Filipe Garc√™s',
      'Fl√°vio Silva', 'Hugo Belga', 'Ismael Campos', 'Jo√£o Couto',
      'Joel Almeida', 'Joaquim Rocha', 'Leonardo Sousa', 'Manuel Rocha',
      'Nuno Ferreira', 'Paulo Pinto', 'Pedro Lopes', 'Ricardo Sousa',
      'Rog√©rio Silva', 'Rui Lopes', 'Serafim Sousa', 'Valter Pinho'
    ];

    const nomes = listaJogadores.map(j => j.nome);
    const faltantes = jogadoresEsperados.filter(j => !nomes.includes(j));
    
    if (faltantes.length > 0) {
      console.log('\n‚ùå Jogadores faltantes:');
      faltantes.forEach(f => console.log(`  - ${f}`));
    }

  } catch (err) {
    addProblema(`Erro ao verificar jogadores: ${err.message}`);
  }

  // 2. Convocat√≥ria
  console.log('\n\nüìã 2. VERIFICANDO CONVOCAT√ìRIA...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    const convocados = await query(`SELECT COUNT(*) as total FROM convocatoria WHERE tipo = 'convocado'`);
    const reservas = await query(`SELECT COUNT(*) as total FROM convocatoria WHERE tipo = 'reserva'`);
    const totalConv = await query(`SELECT COUNT(*) as total FROM convocatoria`);
    
    console.log(`Convocados: ${convocados[0].total}`);
    console.log(`Reservas: ${reservas[0].total}`);
    console.log(`Total: ${totalConv[0].total}`);
    
    if (convocados[0].total === 10 && reservas[0].total === 10) {
      addSucesso('Convocat√≥ria configurada corretamente (10 + 10)');
    } else {
      addAviso(`Convocat√≥ria com ${convocados[0].total} convocados e ${reservas[0].total} reservas`);
    }

    // Verificar confirma√ß√µes
    const confirmados = await query(`SELECT COUNT(*) as total FROM convocatoria WHERE confirmado = 1`);
    console.log(`Presen√ßas confirmadas: ${confirmados[0].total}`);

  } catch (err) {
    addProblema(`Erro ao verificar convocat√≥ria: ${err.message}`);
  }

  // 3. Coletes
  console.log('\n\nüéΩ 3. VERIFICANDO SISTEMA DE COLETES...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    const coletes = await query('SELECT * FROM coletes ORDER BY ordem');
    
    if (coletes.length === 0) {
      addProblema('Sistema de coletes n√£o configurado');
      console.log('   ‚Üí Solu√ß√£o: Executar aplicar_coletes.bat');
    } else if (coletes.length === 20) {
      addSucesso('Sistema de coletes configurado (20 jogadores)');
      
      // Verificar quem tem os coletes
      const comColetes = coletes.filter(c => c.quem_tem === 1);
      if (comColetes.length > 0) {
        console.log(`\nüéΩ Coletes com: ${comColetes[0].jogador_nome}`);
      } else {
        console.log('\nüì¶ Coletes dispon√≠veis (ningu√©m tem)');
      }
      
      // Mostrar ordem
      console.log('\nOrdem dos coletes:');
      coletes.slice(0, 5).forEach((c, i) => {
        const icon = c.quem_tem === 1 ? 'üëâ' : '  ';
        console.log(`  ${icon} ${(i + 1).toString().padStart(2, '0')}. ${c.jogador_nome}`);
      });
      if (coletes.length > 5) {
        console.log(`  ... (${coletes.length - 5} mais)`);
      }
    } else {
      addAviso(`Sistema de coletes com ${coletes.length} entradas (esperado: 20)`);
    }

  } catch (err) {
    addProblema(`Erro ao verificar coletes: ${err.message}`);
  }

  // 4. Jogos
  console.log('\n\n‚öΩ 4. VERIFICANDO JOGOS...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    const jogos = await query('SELECT COUNT(*) as total FROM jogos');
    const presencas = await query('SELECT COUNT(*) as total FROM presencas');
    
    console.log(`Total de jogos: ${jogos[0].total}`);
    console.log(`Total de presen√ßas: ${presencas[0].total}`);
    
    if (jogos[0].total > 0) {
      addSucesso(`${jogos[0].total} jogos registados`);
      
      // √öltimo jogo
      const ultimoJogo = await query('SELECT * FROM jogos ORDER BY data DESC LIMIT 1');
      if (ultimoJogo.length > 0) {
        const jogo = ultimoJogo[0];
        console.log(`\n√öltimo jogo: ${new Date(jogo.data).toLocaleDateString('pt-PT')}`);
        console.log(`  Equipa A: ${jogo.golos_equipa_a} x ${jogo.golos_equipa_b} Equipa B`);
      }
    } else {
      addAviso('Nenhum jogo registado ainda');
    }

  } catch (err) {
    addProblema(`Erro ao verificar jogos: ${err.message}`);
  }

  // 5. Usu√°rios (Admin)
  console.log('\n\nüë§ 5. VERIFICANDO USU√ÅRIOS...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    const users = await query('SELECT username, is_admin FROM users');
    
    console.log(`Total de usu√°rios: ${users.length}`);
    
    const admins = users.filter(u => u.is_admin === 1);
    if (admins.length > 0) {
      addSucesso(`${admins.length} administrador(es) configurado(s)`);
      console.log('\nAdministradores:');
      admins.forEach(u => console.log(`  - ${u.username}`));
    } else {
      addProblema('Nenhum administrador configurado');
    }

  } catch (err) {
    addProblema(`Erro ao verificar usu√°rios: ${err.message}`);
  }

  // 6. Faltas
  console.log('\n\nüìä 6. VERIFICANDO FALTAS...');
  console.log('‚îÄ'.repeat(60));
  
  try {
    const faltas = await query('SELECT COUNT(*) as total FROM faltas_historico');
    console.log(`Total de faltas registadas: ${faltas[0].total}`);
    
    if (faltas[0].total > 0) {
      addSucesso(`${faltas[0].total} faltas no hist√≥rico`);
    } else {
      console.log('Nenhuma falta registada');
    }

  } catch (err) {
    addProblema(`Erro ao verificar faltas: ${err.message}`);
  }

  // RELAT√ìRIO FINAL
  console.log('\n\n' + '‚ïê'.repeat(60));
  console.log('üìã RELAT√ìRIO FINAL');
  console.log('‚ïê'.repeat(60));
  
  console.log(`\n‚úÖ Sucessos: ${sucessos.length}`);
  if (sucessos.length > 0) {
    sucessos.forEach(s => console.log(`  ‚úÖ ${s}`));
  }
  
  console.log(`\n‚ö†Ô∏è  Avisos: ${avisos.length}`);
  if (avisos.length > 0) {
    avisos.forEach(a => console.log(`  ‚ö†Ô∏è  ${a}`));
  }
  
  console.log(`\n‚ùå Problemas: ${problemas.length}`);
  if (problemas.length > 0) {
    problemas.forEach(p => console.log(`  ‚ùå ${p}`));
  }

  // A√á√ïES RECOMENDADAS
  if (problemas.length > 0 || avisos.length > 0) {
    console.log('\n\nüîß A√á√ïES RECOMENDADAS:');
    console.log('‚îÄ'.repeat(60));
    
    if (problemas.some(p => p.includes('faltam 2'))) {
      console.log('\n1Ô∏è‚É£ ADICIONAR JOGADORES FALTANTES:');
      console.log('   Duplo clique: ADICIONAR_JOGADORES.bat');
      console.log('   Ou: node add_missing_players.js');
    }
    
    if (problemas.some(p => p.includes('coletes n√£o configurado'))) {
      console.log('\n2Ô∏è‚É£ CONFIGURAR SISTEMA DE COLETES:');
      console.log('   Duplo clique: aplicar_coletes.bat');
    }
    
    if (!USE_POSTGRES) {
      console.log('\n3Ô∏è‚É£ SINCRONIZAR COM RENDER (ap√≥s corrigir):');
      console.log('   Duplo clique: SYNC.bat');
      console.log('   Ou: node sync_from_render.js');
    }
  }

  console.log('\n\n' + '‚ïê'.repeat(60));
  console.log('Status:', problemas.length === 0 ? '‚úÖ SISTEMA OK' : '‚ö†Ô∏è  ATEN√á√ÉO NECESS√ÅRIA');
  console.log('‚ïê'.repeat(60) + '\n');

  process.exit(problemas.length === 0 ? 0 : 1);
}

// Executar verifica√ß√£o
verificarSistema().catch(err => {
  console.error('\n‚ùå ERRO FATAL:', err);
  process.exit(1);
});
